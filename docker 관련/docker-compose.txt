컨테이너를 이용한 서비스의 개발은 여러개의 컨테이너를 하나의 프로젝트로 다루는 
작업환경을 제공(매번 run을 하는것이 아니라 여러개의 컨테이너를 하나의 서비스로 설정해 관리)

도커 컴포즈는 여러 개의 컨테이너의 옵션과 환경을 정의한 파일을 읽어 컨테이너를 순차적으로 생성하는 방식으로 동작
도커 컴포즈는 컨테이너의 설정이 정의된 YAML 파일(docker-compose.yml)을 읽어 도커 엔진을 통해 컨테이너를 생성합니다.

YAML파일 구성 

version: '3.0'
services:
  web:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - .:/code
    links:
      - mysql:db
      - redis
    environment:
      - MYSQL_ROOT_PASSWORD=mypassword
      - MYSQL_DATABASE_NAME=mydb
      또는
    environment:
      MYSQL_ROOT_PASSWORD:mypassword
      MYSQL_DATABASE_NAME:mydb
    depends_on:
      - mysql
  mysql:
    image: mysql
    command: mysqld
  redis:
    image: redis


image: 서비스의 컨테이너를 생성할 때 쓰일 이미지의 이름을 설정.

links: docker run 명령어의 --link와 같으며, 다른 서비스에 서비스명만으로 접근할 수 있도록 설정. 
    [SERVICE:ALIAS]의 형식을 사용하면 서비스에 별칭으로도 접근할 수 있다.

environment: docker run 명령어의 --env, -e 옵션과 동일. 
    서비스의 컨테이너 내부에서 사용할 환경변수를 지정하며, 딕셔너리(Dictionary)나 배열 형태로 사용할 수 있다.

command: 컨테이너가 실행될 때 수행할 명령어를 설정하며, docker run 명령어의 마지막에 붙는 커맨드와 같다.

depends_on: 특정 컨테이너에 대한 의존 관계를 나타내며, 이 항목에 명시된 컨테이너가 먼저 생성되고 실행. 
    위에서는 web 컨테이너보다 mysql 컨테이너가 먼저 생성. 
    links도 depends_on과 같이 컨테이너의 생성 순서와 실행 순서를 정의하지만 
    depends_on은 서비스 이름으로만 접근할 수 있다는 점이 다름

ports: docker run 명령어의 -p와 같으며 서비스의 컨테이너를 개방할 포트를 설정. 

build: build 항목에 정의된 도커파일에서 이미지를 빌드해 서비스의 컨테이너를 생성하도록 설정. 
    build 항목에서는 도커파일에 사용될 컨텍스트나 도커파일의 이름, 도커파일에서 사용될 인자 값을 설정할 수 있다.





실행 docker-compose up
백그라운드에서 실행 docker-compose up -d
서비스 중지 docker-compose stop
서비스 다운 docker-compose down
서비스 다운 후 볼륨삭제 docker-compose down --volumes
컨피그 확인하기 docker-compose config
실행중인 서비스 컨테이너 명령어 실행하기 docker exec <서비스이름> <명령어>
실행중인 서비스 확인하기 docker-compose ps
서비스 로그 확인하기 docker-compose logs
서비스 로그 지속적으로 프린트하기 docker-compose logs -f
서비스 로그 지정해서 확인하기 docker-compose logs <서비스이름>
서비스 로그 여러개 지정해서 확인하기 docker-compose logs <서비스이름> <서비스이름> ...
스프링 MVC
        DispatcherServlet
            스프링MVC에서 사용하는 front-controller 패턴이 적용된 서블릿. 모든 Http 요청이 들어오는 입구.
        
        동작과정
            0) 클라이언트가 localhost:8080/hello 경로로 요청메시지를 보낸다.
            1) DispatcherServlet은 클라이언트의 요청을 받고, 어떤 핸들러(컨트롤러)에 매칭되는 핸들러를 조회한다.
                Handler handler = getHandler("/hello");
                if (handler == null) {
                    response.setStatus(404);
                    return;
                }
                public Handler getHandler(String requestURI) {
                    return handlerMap.get(requestURI);
                }
            2) 핸들러가 조회되면, DispatcherServlet은 조회된 handler를 어떤 handler adapter가 처리할 수 있는지 조회한다.
                public HandlerAdapter getHandlerAdapter(Handler handler) {
                    for (HandlerAdapter adapter : handlerAdapterList) {
                        if (ha.supports(handler)) {
                            return adapter;
                        }
                    }   
                }
            3) 핸들러 어댑터가 조회되면, DispatcherServlet은 핸들러가 장착된 핸들러 어댑터를 실행시킨다.
                HandlerAdapter adapter = getHandlerAdapter(handler);
                ModelAndView mv = adapter.handle(request, response, handler);   
                
                서블릿이 넣어준 request, response 객체
                핸들러 어댑터가 실행되면, 내부적으로 핸들러가 실행되며 개발자가 작성한 비즈니스 로직이 실행되고 ModelAndView가 반환된다.
                ModelAndView에는 viewName이 담겨 있는데, 이것은 논리적인 뷰이름이다.
                ex) 논리 뷰이름 : memberList
            4) DispatcherServlet은 논리적인 뷰이름을 얻어서, ViewResolver에게 요청하여 View 객체를 반환받는다.
                ViewResolver는 논리 뷰이름으로 물리 뷰이름을 찾는다.
                    ex) 물리 뷰이름 : /WEB-INF/views/memberList.html
                ViewResolver는 논리 뷰이름으로 물리 뷰를 찾기 때문에, prefix와 suffix를 설정할 수 있다.
                
                ViewResolver는 물리적인 뷰를 렌더링해줄 수 있는 View 객체를 만든다.
                    private String prefix = "/WEB-INF/views/";
                    private String suffix = ".html";
                    View view = new View(prefix + viewName + suffix);
            5) DispatcherServlet은 View 객체를 실행시켜 View를 렌더링한다.
                View는 내부적으로 request의 forward 로직을 이용한다.
                public void render(HttpServletRequest request, HttpServletResponse response) {
                    RequestDispatcher dispatcher = request.getRequestDispatcher(viewPath);
                    dispatcher.forward(request, response);
                }
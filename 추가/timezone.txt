<2022-09-15 ~ 2022-09-22>
Timezone 타임존
    시스템 타임존 
        컴퓨터(서버)의 타임존은 보통 운영체제를 설치할 때 설정한다.
    
    스프링 프로젝트 타임존 
        스프링 프로젝트의 기본 타임존은 시스템 타임존으로 설정된다.
        다른 타임존 세팅하기
            필요한 경우 애플리케이션 내부에서 스프링 프로젝트의 타임존을 세팅할 수 있다.
            방법 1. @PostConstruct로 세팅하기
                @PostConstruct
                public void started() {
                    TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
                }
            방법 2. jvm argument로 세팅하기
                java -Duser.timezone="Asia/Seoul" com.example.Main
    데이터베이스 타임존 
        MySQL
            타임존 확인
                show variables like '%time_zone%';
                select @@global.time_zone, @@session.time_zone;     // SYSTEM은 타임존 설정이 없다는 뜻.
                select now();
            MySQL 자체 타임존 설정 변경
                // TODO : 나중에 찾아보기
        
            접속 클라이언트 수준에서의 변경
                JDBC URL serverTimezone 옵션 
                    jdbc:mysql://데이터베이스URL:3306/스키마?useSSL=false&serverTimezone=UTC...
    
    java.time.temporal Enum ChronoUnit
        날짜, 시간 단위의 기준이 되는 세트
        Seconds, Days, HalfDays, Weeks, Months, Years, Decades, Centuries ...
    LocalDate
    LocalTime
    LocalDateTime
        2019-11-12T12:32:22.000003332
        여기서 T는 ISO 형식 시간표기법이다. String 매개변수를 LocalDateTime으로 파싱할 때 'T'가 없으면 파싱 예외가 발생한다.
    
    날짜비교
        LocalDateTime date1, date2;
        date1.isBefore(date2);
        date1.isEqual(date2);
        date1.isAfter(date2);
    날짜 차이계산
        LocalDate date1, date2;     // LocalDate 임에 주의한다.
        Period period = Period.between(date1, date2);
        period.getYears();
        period.getMonths();
        period.getDays();
        // period는 31일을 1개월 1일로 반환한다.
        ChronoUnit.DAYS.between(currentDate, targetDate)
        // 31일은 31일로 반환받는다.
        
    시간 차이계산
        LocalTime time1, time2;
        Duration duration = Duration.between(currentTime, targetTime);
        duration.getSeconds();
        duration.getNano();
    
    해당 월의 마지막 날짜 찾기
        String str = "2020-02-02";
        YearMonth targetYearMonth = YearMonth.from(LocalDate.parse(str, DateTimeFormatter.ofPattern("yyyy-MM-dd")));
        targetYearMonth.lengthOfMonth();    // 해당 월의 일 수
        targetYearMonth.atEndOfMonth();     // 해당 월의 마지막날
    
    변환
        LocalDate -> String
            LocalDate.now().format(DateTimeFormatter.BASIC_ISO_DATE);
        LocalDateTime -> String
            LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        LocalDate -> java.sql.Date
            Date.valueOf(LocalDate.now());
        LocalDateTime -> java.util.Date;
            java.util.Date.from(LocalDateTime.now().atZone(ZoneId.systemDefault()).toInstant());
        LocalDateTime -> java.sql.Timestamp
            java.sql.Timestamp.valueOf(LocalDateTime.now());
        String -> LocalDate
            LocalDate.parse("20191224", DateTimeFormatter.BASIC_ISO_DATE);
        String -> LocalDateTime
            LocalDate.parse("2019-12-25 12:30:00", DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        java.util.Date -> LocalDateTime
            LocalDateTime.ofInstant(new java.util.Date().toInstant(), ZoneId.systemDefault());
        LocalDateTime -> LocalDate
            LocalDate.from(LocalDateTime.now());
        LocalDateTime -> LocalDateTime
            LocalDate.now().atTime(2, 30);
    ZonedDateTime
        ZonedDateTime = LocalDateTime + 타임존/시차
        LocalDateTime과 달리 타임존, 시차 개념을 가진 클래스이고 상호 변환이 가능하다.
        ZonedDateTime nowNewYork = ZonedDateTime.now(ZoneId.of("America/New_York"));
        ZonedDateTime worldCup = Year.of(2002).atMonth(6).atDay(18).atTime(20, 30).atZone(ZoneId.of("Asia/Seoul"));
        타임존 목록
            ZoneId.getAvailableZoneIds();
        
        ZoneId
            타임존 (시간 차이를 타임존 코드로 표시)
            나라에 따라 시차가 달라지는 경우가 있어서, 타임존을 사용하는 것이 단순시차로 구하는 것보다 유리하다.
            ZoneId seoulZoneId = ZoneId.of("Asia/Seoul");
            ZonedDateTime.now(seoulZoneOffset);     // 2022-09-26T00:21:18.709350600+09:00
        ZoneOffset
            시차 (UTC 기준으로 고정된 시간차이를 양수나 음수로 표시)
            ZoneOffset seoulZoneOffset = ZoneOffset.of("+09:00");
            ZonedDateTime.now(seoulZoneId);         // 2022-09-26T00:21:18.710345900+09:00[Asia/Seoul]
        
        변환
            LocalDateTime -> ZonedDateTime
                LocalDateTime localDateTime;
                ZonedDateTime zoned = ZonedDateTime.of(localDateTime, ZoneId.of("Asia/Seoul"));
            ZonedDateTime -> LocalDate, LocalTime, LocalDateTime
                ZonedDateTime zonedDateTime;
                zonedDateTime.toLocalTime();
                zonedDateTime.toLocalDate();
                zonedDateTime.toLocalDateTime();
            ZonedDateTime -> String
                ZonedDateTime worldCup;
                worldCup.format(DateTimeFormatter.ISO_DATE_TIME);
                worldCup.format(DateTimeFormatter.ofPattern("yyyy/MM/dd/ HH:mm:ss z"));
                worldCup.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL));
                worldCup.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL).withLocale(Locale.KOREA));
            String -> ZonedDateTime
                ZonedDateTime zdt1 = ZonedDateTime.parse("2002-06-18T20:30:00+09:00[Asia/Seoul]");
                ZonedDateTime zdt2 = ZonedDateTime.parse("2002/06/18/ 20:30:00 KST", DateTimeFormatter.ofPattern("yyyy/MM/dd/ HH:mm:ss z"));
                ZonedDateTime zdt3 = ZonedDateTime.parse("Tuesday, June 18, 2002 8:30:00 PM KST", DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL));
                ZonedDateTime zdt4 = ZonedDateTime.parse("2002년 6월 18일 화요일 오후 8시 30분 00초 KST", DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL).withLocale(Locale.KOREA));
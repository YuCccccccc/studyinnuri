<2022-06-02>
인덱스
    개요
        비유하자면 책의 뒤쪽에 찾아보기처럼, 빠르게 필요로하는 데이터만 찾기 위해 인덱스를 쓴다.
        찾아보기에 있는 실제 페이지 주소 = 레코드를 찾아가기 위한 주소
        책의 내용 = 데이터 파일
    특징
        sorted list
            인덱스는 정렬상태를 유지하는 sorted list 이다.
            항상 정렬된 상태로 유지한다.
            쓰기 작업은 정렬되기 때문에 오래 걸리지만, 찾을 때는 빠르다.

            실제 데이터는 들어오는 대로 넣는 array list이다.
            넣을떄는 빨리 넣을 수 있어도, 찾을 때는 어렵다.

        인덱스는 컬럼의 값을 변형하지 않는다.

        인덱스는 저장성능을 희생하고 읽기 속도를 높이는 기능이다.

        B-Tree (밸런스 트리)
            인덱스로 가장 많이 사용하는 자료구조인 B-tree.
            물리적으로 좌우대칭을 맞추면서 데이터를 정렬한다.
    
    데이터 삭제
        데이터가 삭제되면 인덱스 트리에 빈 블럭이 발생하는데, 이건 재사용을 안한다.
        그리고 새로운 데이터를 넣을 떄는 블록을 새로 만들어서 추가한다.
        
        대량 삭제는 빈 블록을 많이 생성하고 b-tree가 언밸런스해지기 때문에, 인덱스를 이용한 검색 속도가 처음과 달리 떨어진다.
        
        인덱스 Rebuild
            언밸런스해진 밸런스 트리를 다시 리밸런스 하는 작업이다.
            사용되지 않는 빈 블록들을 삭제하고, 인덱스를 리빌드하면 검색효율이 다시 높아진다.
            리빌드 작업은 테이블 락이 발생하고 쓰기작업이 지연될 수 있어, 정기점검을 이용해서 리빌드한다.

    인덱스 사용
        인덱스는 생성시에 지정한 칼럼의 순서대로 정확히 select될 때 사용된다.

        DESC 인덱스도 ASC 인덱스로 생성된다.
            인덱스 : ALTER TABLE ADD INDEX IDX_TEST(column1 asc, column2 desc);
            
            인덱스 사용 Case
                SELECT * FROM T WHERE column1 = 'abc' AND column2 = 'def';
                SELECT * FROM T WHERE column1 = 'abc' ORDER BY column2;
                SELECT * FROM T ORDER BY column1, column2;
                SELECT * FROM T ORDER BY column1 DESC, column2 DESC;

            인덱스 미사용 Case 
                SELECT * FROM T WHERE column1 = 'abc';
                SELECT * FROM T ORDER BY column1 ASC, column2 DESC;
                SELECT * FROM T ORDER BY column1 ASC, other_column;

    인덱스 미사용 
        Index 칼럼의 변형
            인덱스에는 실제 값이 들어가기 때문에, 값이 내부적으로 변형되는 경우 함수 반환값과 비교가 되지 않기 때문이다.

            int 타입인 num 칼럼을 like 검색

            CHAR 타입인 chr 칼럼을 int 검색

        Not Operator <>
    
        NOT NULL

    결합 인덱스
        인덱스 생성시 여러 컬럼으로 만들 수도 있으며, 어떤 순서로 만드느냐에 따라 성능에 지대한 영향을 미친다.
        결합 인덱스를 만들 때는 데이터가 바로 찾아지는(분포도가 좋은) 순서로 해야 한다.

    인덱스 컬럼을 선택하는 기준
        분포도가 좋은 칼럼은 단독적으로 인덱스를 생성하여 활용도를 올린다.
            분포도란 칼럼의 실제 값들이 어떤 값이 들어가느냐를 보는 것이다. 값이 unique할수록 분포도가 좋은 것이다.
            대부분의 값이 0이거나 1이거나 하는 칼럼은 분포도가 좋지 않은 것이다.
            분포도가 안좋은 칼럼을 인덱스로 지정해도, DB는 그 인덱스를 사용하지 않는다.

        자주 조합되는 칼럼들의 조합은 결합인덱스를 생성하는게 좋다.

        가능한 수정이 빈번하지 않는 칼럼
            불필요한 대량삭제는 인덱스 성능에 큰 영향을 주기 때문에.

        PK 및 FK.
            조인의 연결고리가 되는 칼럼에 대한 인덱스는 상당히 중요하다.

        결합인덱스의 칼럼 순서 선정에 주의
    
    인덱스 설계시 주의점
        반드시 PK를 정의하고, 최대한 작은 데이터타입을 선정해야 한다.

        인덱스 개수는 최소화한다.
            인덱스를 많이 만들면, 정렬유지 때문에 데이터 저장에 대한 속도가 떨어질 수 있다.

        인덱스 특성을 정확히 인지해야 한다.
            클러스터 인덱스, 세컨터리 인덱스

        중복 인덱스는 불필요한 저장공간의 낭비 및 불필요한 정렬 유지가 발생하므로 피해야 한다.


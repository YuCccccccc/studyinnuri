<2022-07-20>
    Blocking vs Non-Blocking, Synchronous(동기) vs Asynchronous(비동기)
    A함수 -> B함수 호출
    Blocking vs Non-Blocking
        제어의 관점. 다른 주체가 작업을 할 때, 자신의 제어권이 있는지 없는지가 중요하다.
        Blocking
            자신의 작업을 진행하다가 다른 주체의 작업이 시작되면, 다른 작업이 끝날 때까지 쉬고있다가 자신의 작업을 시작하는 것.
            B가 응답할 때까지 기다리는 방식
        Non-Block
            다른 주체의 작업에 관련없이 자신의 작업을 하는 것.
            A의 요청으로 B가 시작되고, A도 자신의 작업을 이어나간다.
            A가 요청하면 B는 바로 응답해서 제어권을 넘겨주고, A가 다른 일을 할 수 있게 한다.
    Synchronous vs Asynchronous
        순서와 결과처리의 관점.
        B의 작업 완료 여부를 누가 신경쓰느냐에 관심사를 둔다.
        Synchronous 동기
            결과를 바로 처리한다.
            B의 작업 완료 후 A가 return을 기다리거나,
            B로부터 바로 return을 받더라도 B의 작업 완료 여부를 A가 스스로 확인한다.
        Asynchronous 비동기
            결과를 바로 처리하지 않는다.
            B에게 callback을 전달해서, 작업이 완료되면 B가 전달받은 callback도 실행한다.
    Blocking + Synchronous
        메인함수(A)가 Scanner(B)를 실행하면 제어권이 스캐너로 넘어가고 메인함수는 멈춘다.
        스캐너의 입력이 들어와서 작업이 끝나면, 메인함수는 리턴값을 받아 작업을 이어간다.
    
    Non-Blocking + Synchronous
        A는 B를 호출하고, 기다리거나 다른 일을 하고 있다가 중간중간에 계속 B에게 작업이 끝났는지 물어본다.
        B의 작업이 끝나고, A가 끝났는지 물어보면 B는 결과를 리턴하고 A는 결과를 바로 처리한다.
    Blocking + Asynchronous
        A가 콜백함수와 함께 B를 호출하지만, A는 B가 끝날 때까지 아무것도 못하고 기다리다가,
        B의 작업이 끝나면 B가 콜백함수를 실행하고 A는 간접적으로 결과를 전달받는다.
        이점이 없는 방식.
    Non-Blocking + Asynchronous
        A가 콜백함수와 함께 B를 호출하면, B는 A에게 바로 return 해주고나서 별도의 쓰레드에서 실행된다.
        B의 작업이 끝나면 B가 콜백함수를 실행시켜서 결과가 간접적으로 A에게 전달된다.
        A는 다른 일을 하고 있다가, 시간이 될 때 B의 결과를 처리한다.
<2022-07-27>
공간 데이터 타입
    데이터베이스에서 X, Y좌표로 구성된 공간 데이터를 저장하고 연산하기 위해 제공하는 데이터 타입.
    공간 데이터 타입은 Binary로 저장되기 때문에, insert나 select시 ST_GeomFromText, AsText 함수를 사용해야 한다. 
    데이터 타입 표준은 OGC라는 단체에서 지정함.

    Point
        좌표 공간에서 한 지점의 위치
        Point(10 10)

    LineString
        다수의 Point를 연결해주는 선분
        LINESTRING(10 10,20 25,15 40)

    Polygon
        다수의 선분들이 연결되어 닫혀있는 상태인 다각형
        POLYGON((10 10,10 20,20 20,20 10,10 10))

    Multi-Point
        Point의 집합
        MULTIPOINT(10 10,30 20)

    Multi-LineString
        LineString의 집합
        MULTILINESTRING((10 10,20 20),(20 15,30 40))

    Multi-Polygon
        Polygon의 집합
        MULTIPOLYGON ((( 10 10, 15 10, 20 15, 20 25, 15 20, 10 10 )) , (( 40 25, 50 40, 35 35, 25 10, 40 25 )) )

    GeomCollection
        모든 공간 데이터들의 집합
        GEOMETRYCOLLECTION ( POINT (10 10), LINESTRING (20 20, 30 40), POINT (30 15) )

예제 준비
    // MySQL 5에서는 GeomFromText() 사용 
    create table geo_tab (
        gid int,
        pt point,
        ls linestring
    );
    SET @g1 = 'POINT(10 10)';
    SET @g2 = ST_GeomFromText('LINESTRING(5 5, 10 5, 15 10)');
    insert into geo_tab values(1, ST_GeomFromText(@g1), @g2);
    select gid, ST_AsText(pt), ST_AsText(ls) from geo_tab gt;

    set @p0 = POINT(0, 0);
    set @p1 = POINT(1, 1);
    set @p2 = POINT(2, 2);
    set @l1 = ST_GeomFromText('LineString(1 1, 3 3, 5 5, 10 10, 14 14)');
    set @l2 = ST_GeomFromText('LineString(2 2, 8 8)');
    set @b1 = ST_GeomFromText('Polygon((1 1,1 10,10 10,10 1, 1 1))');
    set @b2 = ST_GeomFromText('Polygon((8 4, 8 6, 12 6, 12 4, 8 4))');

공간 함수
    공간 연산 함수
        두 공간 객체의 연산 결과로 새로운 공간 객체를 반환해주는 함수
            ST_Intersection     // 교집합 공간객체 반환
            ST_Union            // 합집합 공간객체 반환
            ST_Difference       // 차집합 공간객체 반환
            ST_Buffer           // 거리만큼 확장된 공간객체 반환
            ST_Envelope         // 포함하는 최소 MBR인 공간객체 반환
            ST_StartPoint       // 첫번째 Point 반환
            ST_EndPoint         // 마지막 Point 반환
            ST_PointN           // n번째 Point 반환

            SELECT ST_AsText(ST_Intersection(@p0, @p1)), ST_AsText(ST_Intersection(@b1, @p2));
            SELECT ST_AsText(ST_Union(@p0, @p1)), ST_AsText(ST_Union(@l1, @p1));
            SELECT ST_AsText(ST_Difference(@p0, @p1)), ST_AsText(ST_Difference(@l1, @p2));
            SELECT ST_AsText(ST_Buffer(@b1,0));
            SELECT ST_AsText(ST_Envelope(@l2));
            SELECT ST_AsText(ST_StartPoint(@l1));
            SELECT ST_AsText(ST_EndPoint(@l1));
            SELECT ST_AsText(ST_PointN(@l1,3));

    공간 관계 함수
        두 공간 객체 간의 관계를 일반 데이터 타입으로 반환해주는 함수.
            ST_Equals(g1, g2)       // 동일여부
            ST_Disjoint(g1, g2)     // 겹치는 곳이 있는지 여부
            ST_Within(g1, g2)       // g1이 g2에 포함됐는지 여부
            ST_Overlaps(g1, g2)     // 교집합 존재 여부
            ST_Intersects(g1, g2)   // 교집합 존재 여부
            ST_Contains(g1, g2)     // g2가 g1에 포함됐는지 여부
            ST_Touches(g1, g2)      // 경계영역에서만 겹치는 경우
            ST_Distance(g1, g2)     // g1과 g2간의 거리 반환
        
            SET @p0 = POINT(0,0); 
            SET @p1 = POINT(1,1); 
            SET @p2 = POINT(2,2);
            SET @l1 = ST_GeomFromText('LineString(1 1, 3 3)');
            SET @l2 = ST_GeomFromText('LineString(2 2, 4 4)');
            SET @b1 = ST_GeomFromText('Polygon((1 1,1 10,10 10,10 1,1 1))');

            SELECT ST_Equals(@p1, @p1), ST_Equals(@p1, @l1);
            SELECT ST_Disjoint(@b1, @p0), ST_Disjoint(@b1, @p2);
            SELECT ST_Within(@p2, @b1), ST_Within(@b1, @p2);
            SELECT ST_Overlaps(@l1, @l2), ST_Overlaps(@l1, @p1);
            SELECT ST_Intersects(@b1, @p2), ST_Intersects(@b1, @p1);
            SELECT ST_Contains(@b1, @p2), ST_Contains(@p2, @b1);
            SELECT ST_Touches(@b1, @p1), ST_Touches(@b1, @p2);
            SELECT ST_Distance(@p1, @p2);
    
    참고문서
        https://youngwoon.tistory.com/3
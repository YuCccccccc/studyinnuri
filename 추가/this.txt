<2022-06-30>
    this
        자신의 인스턴스를 참조하는 특별한 변수다.
        
        this를 사용하는 이유
            생성자 내부에서는 인스턴스 변수명보다 파라미터의 우선순위가 더 높다.
            때문에 인스턴스 변수명과 파라미터 변수명이 같을 경우, 인스턴스 변수를 지칭할 수가 없다.
            이럴 때 this를 사용하여 인스턴스 변수를 지칭한다.

            예시
                class Car {
                    String name;
                    Car (String name) {
                        name = name;        // name 파라미터에 name 파라미터를 할당하는 무의미한 작업이 된다.
                        this.name = name;   // 인스턴스변수 name에 name 파라미터로 들어온 값을 할당한다.
                    }
                }
        
        this()
            자신의 인스턴스의 다른 생성자를 호출한다.
            생성자의 선두에서만 사용할 수 있다.

    생성자
        생성자는 인스턴스를 적절하게 초기화하는 역할만 한다.
        인스턴스 생성은 new 키워드가 하는 것이기 때문에, 생성자에는 리턴타입이 없다.
        
        기본 생성자
            생성자를 정의하지 않은 클래스에는, 컴파일시에 파라미터가 없는 생성자가 자동으로 만들어진다.
            기본 생성자의 내부가 사실 비어있는 것은 아니다.
        
        생성자 오버로딩
            생성자는 비슷하지만 다르게 되어있기 때문에, 유지보수와 확장성을 생각해서 유사한 코드는 가능한 하나의 장소로 집중시켜야 한다.
            month에 대한 변수 설정이 변경되면 3번째 생성자만 변경하면 된다.

            public Day()                                {                                       }
            public Day(int year)                        { this.year = year;                     }
            public Day(int year, int month)             { this(year); this.month = month;       }
            public Day(int year, int month, int date)   { this(year, month); this.date = date;  }
            public Day(Day d)                           { this(d.year, d.month, d.date);        }

    static
        static 변수
            각 인스턴스가 갖는 것이 아닌, 해당 클래스의 모든 인스턴스가 공유해야 할 변수를 표시한다.
        
        static 메소드
            특정 인스턴스가 아니고 클래스 전체에 관계된 처리나, 각 인스턴스의 상태와 무관한 작업을 담는다.
        
        static 블록 (클래스 초기화자)
            클래스가 초기화되는 동안에 실행되며, 단 한번만 실행된다.
            클래스가 사용되기 전에 딱 1회 실행된다고 생각하면 된다.

            static { // 실행 코드 }
            
            클래스가 초기화되는 경우 (static 블록 발동조건)
                1) 클래스의 인스턴스가 생성되는 경우
                    static 블록 실행 후 -> 인스턴스 생성

                2) 클래스의 static 메소드가 호출되는 경우
                    static 블록 실행 후 -> static 메소드 호출

                3) 클래스의 static 변수가 사용되는 경우
                    static 블록 실행 후 -> static 변수 조회 / static 변수에 값 할당

            어떤 형태로든 클래스를 처음 이용하는 시점에서는 static 블록의 실행이 완료되어 있다.
            프로그램 내에 클래스가 선언되어 있어도 전혀 사용되지 않으면, 이 클래스가 초기화되는 일은 없고 static 블록도 실행되지 않는다.
            static 블록 내에서 return, this, super 키워드를 사용할 수 없다.

            클래스 변수를 초기화하기 위해 필요한 계산이나 처리는 static 블록으로 실행한다.
            그 이외의 처리를 해도 상관없음.


    인스턴스 초기화자
        인스턴스를 초기화하기 위한 블록으로, 생성자의 선두에서 자동으로 호출된다.
        모든 생성자에서 공통으로 실행해야 할 처리(인스턴스 생성때마다 반드시 실행해야 될 처리)는 반드시 인스턴스 초기화자로 독립시킨다.
        
        { // 실행 코드 }
        
        생성자 본체의 실행이 시작될 때 실행된다.
        생성자가 여러개 있는 상황에서 어느 생성자가 실행되어도, 먼저 인스턴스 초기화자가 실행되고 생성자의 본체가 실행된다.

        실행 시점
            public XY(int x) { super();  [V] this.x = x; }
            인스턴스 초기화
    BiPredicate
        Java에서 함수형 프로그래밍을 구현하기 위해 Java 버전 1.8부터 도입된 함수형 인터페이스로 제네릭 타입인 두 개의 매개변수를 전달받아 
        특정 작업을 수행 후 Boolean 타입의 값을 반환하는 작업을 수행
        
        ex1) 기본
            public static void main(String[] args) {
                BiPredicate<Integer, Integer> biPredicate = (n1, n2) -> n1 > n2;
                boolean test = biPredicate.test(10, 100);
                System.out.println(test);
            }

        ex2) and
            public static void main(String[] args) {
                BiPredicate<Integer, Integer> biPredicate1 = (n1, n2) -> n1 > n2;
                BiPredicate<Integer, Integer> biPredicate2 = (n1, n2) -> n1 * n2 > 100;

                boolean test = biPredicate1.and(biPredicate2).test(100, 10);
                System.out.println(test);
            }

        ex3) or
            public static void main(String[] args) {
                BiPredicate<Integer, Integer> biPredicate1 = (n1, n2) -> n1 > n2;
                BiPredicate<Integer, Integer> biPredicate2 = (n1, n2) -> n1 * n2 > 100;

                boolean test = biPredicate1.or(biPredicate2).test(10, 100);
                System.out.println(test);

                test = biPredicate1.or(biPredicate2).test(9, 10);
                System.out.println(test);
            }

        ex4) negate
            public static void main(String[] args) {
                BiPredicate<Integer, Integer> biPredicate1 = (n1, n2) -> n1 > n2;
                BiPredicate<Integer, Integer> biPredicate2 = biPredicate1.negate();

                boolean test = biPredicate1.test(10, 9);
                System.out.println(test);

                test = biPredicate2.test(10, 9);
                System.out.println(test);
            }
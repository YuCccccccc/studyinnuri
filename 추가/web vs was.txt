웹서버 vs WAS
        웹서버 : 정적 리소스(파일)을 서빙하는 것에 특화
        WAS : 애플리케이션 코드를 실행하는 것에 특화되어 있음
    
    서블릿 컨테이너
        서블릿을 지원하는 WAS.
        서블릿을 생성/초기화/호출/종료 하는 등 서블릿의 생명주기를 관리한다.
        특징
            1. 서블릿 객체는 싱글톤으로 관리된다.
            2. 동시 요청을 처리하기 위한 멀티 쓰레드 처리를 지원한다.
                서블릿은 싱글톤인데 웹 요청은 보통 동시에 많은 요청이 들어온다.
                WAS가 이 부분을 멀티쓰레드로 처리해주기 때문에 개발자는 싱글 쓰레드 프로그래밍을 하듯이 개발하면 된다.
                WAS 설정의 가장 중요한 부분이 적절한 쓰레드 개수를 설정하는 것이다.
                WAS에서 쓰레드 풀에 생성가능한 쓰레드의 최대치를 관리한다.
                쓰레드가 너무 적으면 서버의 자원을 충분히 활용하지 못하고 응답이 지연된다.
                쓰레드가 너무 많으면 서버 자원이 임계점을 초과하여 서버가 다운되기 쉽다.
            3. JSP도 서블릿으로 변환된다.
        
        쓰레드 풀
            이미 생성되어 있는 쓰레드를 쓰레드풀에서 빌려다가 사용후 반납하는 방식으로,
            쓰레드 생성비용와 컨텍스트 스위칭 비용을 아낄 수 있다.
    
    서블릿
        클라이언트와 서버가 HTTP 메시지를 주고 받는데서 발생하는 반복적인 작업들을 쉽게 처리해준다.
        동작과정
            0) 톰캣이 구동될 때, 개발자가 작성한 서블릿을 자신의 서블릿 컨테이너에 등록한다.
            1) 클라이언트가 localhost:8080/hello 로 요청을 보낸다.
            2) 요청이 들어오면 WAS는 매칭되는 서블릿을 실행하는 과정에서, 서블릿의 protected service 메소드를 호출한다. 
            3) WAS는 서블릿을 호출하면서 클라이언트가 보낸 요청메시지를 기반으로 request를 만들고, 
                응답나갈 response 객체도 생성해서 파라미터로 넘겨준다.
            4) 개발자가 작성한 비즈니스 로직이 실행되며, response 객체에 처리 결과 데이터가 입력된다.
            5) WAS는 response 객체에 담긴 데이터를 바탕으로 HTTP 응답을 생성하고 클라이언트에 응답한다.
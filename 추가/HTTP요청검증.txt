검증
    1. 컨트롤러의 중요한 역할중 하나는 HTTP 요청이 정상인지 검증하는 것이다.
    2. 클라이언트 검증은 조작할 수 있어 보안에 취약하지만 즉각적인 고객 사용성이 높다.
    3. 따라서 클라이언트 검증와 서버검증을 섞어서 적절히 사용하되, 최종적으로 서버 검증은 필수다.
    4. API 방식을 사용하는 경우 검증오류를 API 응답 결과에 잘 남겨줘야 한다.
    5. 예를 들어 상품 등록폼에서 날아온 요청이 검증 실패하면, 입력값을 model에 담아 유지한 상태로 상품등록폼을 다시 보여줘야 한다.

    BindingResult
        사용자 입력값에 대한 검증 오류를 보관하는 객체. Errors 인터페이스를 상속받는다.

        BindingResult에 검증오류가 적용되는 경우
            case 1. 바인딩이 실패하는 경우 스프링이 BindingResult에 오류를 담아준다.
            case 2. 개발자가 직접 담는다.
            case 3. Validator를 사용한다.
        
        특징
            1) 컨트롤러까지 흐름 유지
                메소드 파라미터에 BindingResult가 선언되어 있으면, 스프링은 타입 오류 등으로 바인딩 자체 실패에
                대한 FieldError를 생성하여 BindingResult에 담아준다. 이 말은 타입 오류가 발생해도 컨트롤러로 흐름이 넘어온다는 뜻이다.
                개발자는 BindingResult 를 넘겨받아서, 입력값 검증이나 비즈니스 검증 오류 등을 여기에 담아서 사용한다.
            
            2) 선언 위치
                BindingResult 파라미터의 위치는 검증할 파라미터 객체 바로 뒤에 위치해야 한다.
            
            3) 검증오류 Type
                객체 검증오류는 FieldError 객체를, 객체 범위를 넘어선 글로벌 오류는 ObjectError 객체를 사용한다.
            
            4) 자동 Model 담김
                굳이 Model에 담지 않아도 자동으로 담긴다. 때문에 타임리프에서 바로 사용할 수 있다.
            
            5) 검증 target을 이미 알고 있음
                선언 위치가 정해져 있기 때문에, target에 대한 정보를 이미 알고 있다.
    
    FieldError ( extends ObjectError )
        특정한 객체의 필드가 거절된 검증 오류를 나타낸다.

        특징
            1) 오류 발생시 사용자 입력값 유지
                바인딩 자체가 실패하면 사용자의 입력값을 유지하기가 어려운데, rejectedValue에 저장할 수 있다. 
            
            2) MessageSource에 정의된 메시지 사용
                MessageCodesResolver를 사용하기 때문에 생성자에 정의된 codes, arguments 등을 사용하면 된다.
        
    에러메시지 설계
        스프링은 MessageCodesResolver를 통해 메시지 기능을 효과적으로 제공한다.
        
        특징
            1) 메시지의 단계
                오류 코드가 여러 단계로 이뤄진 메시지는 더욱 상세한 메시지이며, 높은 우선순위를 가진다.
                    required.item.itemName: 상품이름은 필수입니다.
                    required: 필수 값 입니다.
            
            2) 순차적인 선택
                높은 우선순위를 가진 메시지가 없으면 다음 우선순위의 메시지가 선택된다.
                    required.item.itemName -> required.item -> required
            
            3) 메시지의 후보
                스프링은 아래의 메시지 오류 코드 후보를 만들어낸다.
                    [
                        "required.item.itemName",       // 1순위. code+target+field
                        "required.itemName",            // 2순위. code+field
                        "required.java.lang.String",    // 3순위. code+type
                        "required"                      // 4순위. code
                    ]
            
            4) 메시지 덮어쓰기
                스프링이 기본적으로 정의한 typeMismatch 같은 오류 코드도
                errors.properties 에 재정의하면 덮어쓸 수 있다.
            
            5) ValidationUtils
                검증을 위한 if문 대신 ValidationUtils.rejectXxx() 를 이용하면 단순한 검증은 깔끔하게 처리 가능. 
    
    Validator
        검증로직을 분리할 수 있다.
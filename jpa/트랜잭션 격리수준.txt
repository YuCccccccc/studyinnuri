트랜잭션이 보장해야 하는 ACID중 격리성과 관련된 내용인데 격리성을 완벽히 보장하려면 동시성 처리 성능이 매우 나빠진다. 이런 문제로 인해 ANSI 표준은 트랜잭션의 격리 수준을 4단계로 나누어 정의했다. 

A : Atomicity / C : Consistency / I : Isolation / D : Durability

트랜잭션 관리 포인트 3

1. Dirty Read : 변경된 데이터가 아직 미완성인데 다른 트랜잭션에서 읽어가는 것

2. Nonrepeatble Read : 트랜잭션이 수행중인데 다른 트랜잭션이 읽고 있는 데이터를 수정해서 쿼리 결과가 달라지는 것

3. Phantom Read : 동일한 쿼리가 다른 값을 반환하는 것 


아래로 내려 갈수록 동시성이 높아지는 대신 속도가 느려진다.  ( lv.0 -> lv.3)

위로 올라 갈수록 동시성이 떨어지는 대신 속도가 빨라진다.  (lv.3 -> lv.0)

격리수준
@Transactional(isolation = Isolation.SERIALIZABLE)
READ UNCOMMITED (lv.0)
    커밋되지 않은 데이터도 읽을 수 있음
    A트랜잭션에서 데이터를 변경하려다 에러가 발생해서 Rollback을 했다고 치면 A트랜잭션이 실행되는 동안 데이터를 요청한 B 트랜잭션은 잘못된 데이터를 읽고 있을 수가 있다. Dirty Read, Dirty Write이 가능함
    Dirty Read는 방지 X, Noorepeatable read방지 X, Phantom Read 방지 X
READ COMMITED (lv.1)
    커밋된 데이터만 불러온다. (= 반복해서 같은 데이터를 불러올 수 없다) 
    SELECT 문장이 수행되는 동안 해당 데이터에 Shared Lock(읽기 가능, 변경 불가)이 걸리는 레벨
    어떠한 사용자가 A라는 데이터를 B라는 데이터로 변경하는 동안 다른 사용자는 해당 데이터(B)에 접근할 수 없습니다.
    Dirty Read 방지 O , Noorepeatable read 방지 X
REPEATABLE READ (lv.2)
    트랜잭션 동안에는 한번 조회한 데이터를 계속 조회해도 같은 데이터가 나오지만, 만약 다른 트랜잭션에서 데이터를 추가한 경우 기존 트랜잭션에서 반복 조회하면 결과 집합이 새로 추가된 데이터를 포함한 결과를 가져오게 된다.  
    Dirty Read 방지 O, Noorepeatable read 방지 O, Phantom Read 방지 X 
SERIALIZABLE (lv.3)
    모든 트랜잭션을 순서대로 실행한다.
    Dirty Read 방지 O, Noorepeatable read 방지 O, Phantom Read 방지 O


두번의 갱신분실문제 
https://hudi.blog/jpa-concurrency-control-optimistic-lock-and-pessimistic-lock/


낙관적 락(Lock)
    @version으로 관리
    @Version 은 버전 관리용 필드를 만들어 적용
    @Version 으로 추가한 버전 관리 필드는 JPA가 직접 관리하므로 임의로 수정해서는 안된다
        @Entity
        public class Board {

            @Id
            private String id;
            private String title;

            @Version
            private Integer version;
        }

    LockModeType을 통해서 락 옵션을 변경
    NONE - 기본으로 적용되는 락 옵션
        엔티티를 수정하는 시점에 엔티티의 버전을 증가시킨다. 
        이때 엔티티의 버전이 조회 시점과 다르다면 예외가 발생한다.
        이점 : 두 번의 갱신 분실 문제를 해결

    OPTIMISTIC - 엔티티를 조회만 해도 버전을 체크, 엔티티의 조회 시점부터 트랜잭션이 끝날 때 까지 다른 트랜잭션에 의해 변경되지 않음을 보장
        트랜잭션을 커밋하는 시점에 버전정보를 체크한다.
        이점 : 애플리케이션 레벨에서 DIRTY READ와 NON-REPEATABLE READ를 방지
    OPTIMISTIC_FORCE_INCREMENT - 낙관적 락을 사용하면서 버전 정보를 강제로 증가한다. 엔티티가 물리적으로 변경되지 않았지만, 논리적으로는 변경되었을 경우 버전을 증가하고 싶을 때 사용한다.
        게시물과 첨부파일 엔티티가 1:N 관계로 있다고 가정하자. 게시물에 첨부파일이 하나 추가된 상황은 게시물 엔티티의 물리적 변경은 일어나지 않았지만, 논리적인 변경은 일어났다. 이때 버전을 변경하고 싶다면 해당 락 옵션을 사용하면 된다.
        논리적인 단위의 엔티티 묶음을 관리,
        엔티티가 직접적으로 수정되어 있지 않아도, 트랜잭션을 커밋할 때 UPDATE 쿼리를 사용해 버전 정보를 강제로 증가
        엔티티의 버전을 체크하고 일치하지 않으면 예외가 발생한다. 이때 추가로 엔티티의 정보도 실제로 변경되었다면 2번의 버전 증가가 발생

비관적락
    데이터베이스의 락을 사용하여 동시성을 제어하는 방법이다. 주로 쿼리에 SELECT ... FOR UPDATE 구문을 사용하고, 버전 정보는 사용하지 않는다. 

    엔티티가 아닌 스칼라 타입을 조회할 때도 사용할 수 있다.
    데이터를 수정하는 즉시 트랜잭션의 충돌을 감지할 수 있다.
    
    PESSIMISTIC_WRITE - 비관적 락이라고 하면 일반적으로 해당 옵션을 의미한다.
        용도/동작 : 데이터베이스에 SELECT ... FOR UPDATE 를 사용하여 배타 락을 건다.
        이점 : NON-REPEATABLE READ를 방지한다.

    PESSIMISTIC_READ - 데이터를 반복 읽기만 하고 수정하지 않을 때 사용한다. 
        일반적으로 잘 사용하지 않는다고 한다. 데이터베이스 대부분은 방언에 의해 PESSIMISTIC_WRITE 로 동작한다.
        동작 : SELECT ... FOR SHARE (LOCK IN SHARE MODE)

    PESSIMISTIC_FORCE_INCREMENT - 비관적 락 중 유일하게 버전 정보를 사용
        비관적 락이지만 버전 정보를 강제적으로 증가시킨다. 
        하이버네이트의 경우 nowait 를 지원하는 데이터베이스에 대해서 FOR UPDATE NOWAIT 옵션을 적용하고, 그렇지 않다면 FOR UPDATE 를 적용한다.
    FOR UPDATE NOWAIT  - select 할때 lock을 제어할수 없는 상태(누군가 사용중.)이면 예외 발생.
    FOR UPDATE WAIT 5(초단위) -  select 할때 lock을 제어할수 없는 상태(누군가 사용중.)이면 5초동안 재시도하고 포기.

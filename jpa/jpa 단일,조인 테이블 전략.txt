
JPA 기본전략은 하나의 테이블에 모두 넣는 단일 테이블 전략을 사용

단일 테이블 전략
    단일 테이블을 엔티티 분리를 통하여 사용. 
    장점 - 테이블하나로 공통 부분이 많은 엔티티들을 관리할수있다.테이블이 하나만 생성이 되어 조회시 조인이 없으며 조회 성능이 빠름 
    단점 - 테이블과 엔티티가 일치하지 않아 엔티티 구성만으로 테이블을 유추하기 어렵다.
        자식 Entity가 매핑한 Column은 null을 허용해야한다.
        구분컬럼의 구분값이 설정되어 있지 않은 값이 들어있으면 공통으로 사용되는 엔티티 조회시 오류 발생

    공통으로 사용되는 엔티티에 어노테이션을 추가해준다. 
        @Inheritance(strategy = InheritanceType.SINGLE_TABLE)   //단일 테이블임을 알려주고 
        @DiscriminatorColumn(name = "typeCd") // 부모 클래스에 구분 컬럼을 지정한다. 이 컬럼으로 저장된 자식 테이블을 구분한다. 해당 컬럼은 클래스에 추가하지 않는다.
        @DiscriminatorValue("organization") // 엔티티에서 구분컬럼에 저장할 값.(구분될 값.)
    
    자식 클래스에 어노테이션 구성
        @DiscriminatorValue("company")// 구분 컬럼에 저장될 값을 지정한다. 해당 엔티티 조회시 where 조건의 값으로 사용된다.

조인 테이블 전략
    테이블과 엔티티를 동일하게 구성 
    장점 - 테이블과 엔티티의 구성이 동일하다. (정규화), 저장공간의 효율화.
    단점 - 조인 구성이 복잡해진다. 데이터 저장시 insert sql을 두번 호출한다. - 상위와 본인을 저장해야하므로 

    
    공통으로 사용되는 부모클래스. 
        @Inheritance(strategy = InheritanceType.JOINED) // 상속 매핑은 부모 클래스에 해당 어노테이션을 써야한다. 매핑전략 지정
        
공통적으로 자식 클래스(자식 엔티티)는  extends 부모클래스(부모엔티티) 

참고.
https://adg0609.tistory.com/26
외례키를 갖는 엔티티가 연관관계의 주인

@oneToMany(mappedBy = "필드명") -> 리스트로 갖고 있는 엔티티의 필드명을 "필드명"에 넣어주면 된다.
    읽기 전용이 된다. 해당 값을 변경한다고 엔티티의 값이 변경되지 않음.

@ManyToOne
@JoinColumn(name = "member_id")
Private Member member; 
    Member 엔티티의 id값이 memeber_id와 같은 것을 조인.


Date타입은 Java8 이상부터는 하이버네이트가 지원하는 LocalDateTime 타입으로 진행하는것이 유리하다.

enumerated 주의사항 - enumType은 ordinal이 디폴트인데 이것은 순서대로 숫자로 들어간다. 그렇게 되면 중간에 값이 추가되면 매칭이 꼬이기 때문에 사용하지 않고 String 으로 사용.

setter가 있으면 변경포인트가 너무 많아져 유지보수가 어려워진다. 

모든 연관 관계는 지연로딩(LAZY)으로 설정해서 진행한다. 
    즉시로딩 - 연관된 데이터들도 함께 조회. 
    fetch join 또는 엔티티 그래프 기능을 사용.

컬렉션은 필드에서 초기화 
    private List<엔티티> 명 = new ArrayList<엔티티>();
    하이버네이트는 엔티티를 연속화 할때 컬렉션을 감싸서 자체 내장 컬렉션으로 변경하는데 
    컬렉션을 잘못생성하면 하이버네이트 내부 메커니즘에 문제가 발생할 수 있다.

스프링 부트 신규 설정 (엔티티 -> 테이블)
카멜케이스 -> 언더스코어(ex memberPoint -> member_point)
. -> _    
대문자 ->  소문자

fetch join 
    쿼리를 날릴때 참고하는 엔티티들을 join fetch하여 쿼리 하나로 갖고 온다. 
    단점 - 페이징을 할수 없다. - 메모리에서 페이징 처리를 해서 경고로 처리된다. 데이터를 메모리에 올리고 거기서 페이징.
    

쿼리 조회시 엔티티를 직접 받을수 없고 식별자를 이용해서 받아야한다. 
    JPA는 식별자만 반환한다. 

쿼리 속도 차이는 조인을 얼마나 잘하는지에 따라 달라지지 조회하는 필드가 몇개 차이 안나면 차이가 심하지 않다. 
실시간 트레픽이 많지않은 경우.

레파지토리는 순수한 엔티티를 조회하는 부분, 그것이 아니라면 queryRepository등등 따로 만들어 분리해주는것이 좋다. 

엔티티로 조회하면 재사용성도 좋고 개발도 단순해진다. 

쿼리방식 선택 권장 순서 
1.엔티티를 DTO로 변환하는 방식을 선택한다. 
2.필요하면 페치 조인으로 성능을 최적화 하고 그래도 안되면 DTO를 직접 조회하는 방식을 사용한다. 
3.최후의 방법은 JPA가 제공하는 네이티브 SQL이나 스프링 JDBC 템플릿을 사용해서 SQL을 직접 사용한다. 


컬렉션 조회 최적화
    toOne 관ㄱㅖ는 패치 조인 한다. - row 수를 증가시키지 않아 페이징쿼리에 영향을 주지 않는다 
    나머지는 yml, properties 파일의 JPA hibernate 설정에 default_batch_getch_size로 사이즈를 정해주어 설정한 사이즈만큼 in절이 돌수있도록 리미트를 걸어준다.(보통 최대1000개)


getOne, getReferenceById 
    Optional<T> 가 아닌 T가 반환값입니다.
    즉, 매개변수로 전달된 ID에 해당하는 entity를 반환하되,
    없을 경우 내부에서 예외를 발생시킵니다.
    특정 대상이 존재하지 않을 때의 커스텀 예외를 XXNotFoundException

    getOne, getReferenceById 는 findById와 동작도 다릅니다.
    단순히 Optional 로 반환하느냐, 내부에서 예외를 발생시키느냐 아니냐의 말고도 다른 점이 있습니다.

    바로 lazy loading 인데요,
    getOne 또는 getReferenceById 메서드로 반환된 객체 내부의 정보를 요청하는 시점에
    그제서야 DB를 조회합니다.
    즉, 내부의 값을 필요로 하지는 않고, 다른 객체에게 할당하는 목적으로만 조회하는 경우,
    getReferenceById 를 사용하면 성능상 이점이 있을 수 있다는 의미입니다.

    getReferenceById 는 EntityManager의 getReference 메서드를 호출하여,
    참조값만 가져온 후, 조회된 entity의 내부 값이 필요해지는 시점에 lazy loading으로
    DB를 조회해 값을 가져오도록 동작한다는 것인데요,

    이런 의미에서 getOne 보다는 getReferenceById, 즉 참조값만 가져온다
    라는 메서드 이름이 훨씬 정확한 의미를 전달한다고 볼 수 있겠네요!

------------------------20230311 ----------------------------------------

deleteAll과 deleteInBatch 의 차이

deleteAll 은 실행시 
    delete 문을 갯수만큼 실행한다. 

deleteInBatch 는 실행시 
    delete 문을 하나만 실행하고 where절에서 id or id 갯수를 증가시킨다. 
    where id = ? or id = ?....

-----------------------20230426---------------------
-----spring test시 ---
@RunWith(SpringRunner.class) -- jUnit에게 spring과 관련된것을 테스트 할거라고 알려주는
@SpringBootTest

--------------------


 
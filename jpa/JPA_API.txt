
--JpaRepository 인터페이스를 상속받는 AccountRepository를 만들어 줍니다.

@Repository
public interface AccountRepository extends JpaRepository<Account, Long> {
}

--AccountController 추가
@RestController  -- @Controller + @ResponseBody의 기능을 한다. 스프링에서 제공하는 어노테이션
@RequestMapping("/api")
@RequiredArgsConstructor --롬복의 어노테이션, 필드에 대한 클래스 생성자를 자동으로 해줌
public class AccountApiController {

  	//생성자 주입으로 AccountRepository를 주입시켜줍니다. 
    private final AccountRepository accountRepository;

  	// 생성 
    @PostMapping("/account")
    public ResponseEntity<?> saveAccount(@RequestBody @Valid Account account) {
        Account savedAccount = accountRepository.save(account);
        return ResponseEntity.ok(savedAccount);
    }

    @PostMapping("/account2")
    public CreateAccount saveAccount2(@RequestBody @Valid CreateAccount request) {
        Account account = new Account();
        account.setName(request.getName());
        return ResponseEntity.ok(account);
    }

    @Data
    static class CreateAccount {
        @NotEmpty
        private String name;
    }


    // 목록 조회
    @GetMapping("/account")
    public List<Account> all() {
        return accountRepository.findAll();
    }

  	// 수정 
    @PutMapping("/{id}")
    public void updateAccount(
            @PathVariable Long id, 
            @RequestBody @Valid UpdateAccountRequest account) {
        accountRepository.update(id, account.getName());        
    }

    @Data
    static class UpdateAccountRequest {
        @NotEmpty
        private String name;
    }

    @Data
    @AllArgsConstructor
    static class UpdateAccountResponse {
        private Long id;
        private String name;
    }
}

--------
@Valid : Entity에서 @NotEmpty 어노테이션이 걸려있는 것들을 체크해준다. 하지만 API마다 null처리가 달라지므로 주의가 필요하다.
entity는 파라미터로 받으면 안되고 노출이 되어서도 안된다. 

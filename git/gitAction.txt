
GitHub Actions
GitHub에서 제공하는 서비스로, 빌드, 테스트, 배포 파이프라인을 자동화할 수 있는 CI(Continuous Integration, 지속 통합)와 CD(Continuous Deployment, 지속 배포) 플랫폼. 
GitHub 리포지토리에서 손쉽게 CI/CD 결과를 확인하고 관리할 수 있고 YAML 포맷을 사용하여 가독성이 높고, 이미 구현되어 있는 수많은 액션을 활용하여 간단하게 CI/CD 플로우를 작성할 수 있다.

워크플로우
    작업의 흐름으로 목적을 위한 일련의 실행 트리거, 환경, 기능들을 모두 포함하고 있다.
    워크플로우는 코드저장소 내의 github/workflows폴더 아래에 YAML파일로 작성.
    하나의 코드저장소에는 여러개의 워크플로우 파일이 존재할수 있다.
    워크플로우 파일에서는 on 속성을 통해서 언제 실행될지 정의한다.
    ex) 
        on:
            push:
                branches:
                - main
                - develop
            pull_request:
        위의 코드는 main, develop브랜치에서 커밋이 푸쉬도거나 Pull request가 만드어지고 동기화 될때 워크플로우가 진행되는 설정이다.


job
    jobs속성을 통해서 수행할 job을 정의한다. 
    job은 독립된 환경에서 실행되는 하나의 처리 단위를 의미한다.
    하나의 워크플로우는 여러개의 잡을 정의할 수 있는데 각각의 job은 다른 job과 별개의 독립적인 환경에서 실행된다.
    
    job에서 필수적으로 정의 해야할 속성은 runs-on과 steps이다.
    runs-on에는 job을 실행하는 러너(환경)을 정의한다. 
    Public GitHub을 사용하신다면, GitHub에서 제공하는 러너를 사용하여 Job을 실행, Enterprise GitHub를 사용하는 경우, 직접 GitHub Actions Runner를 만들어 사용
    ex)
        jobs:
            echo-hello-world:
                runs-on: ubuntu-latest
                name: Echo Hello World Job
                steps:
                - uses: actions/checkout@v2

                - run: echo Hello World!
        echo-hello-world라는 Job이 하나 존재하고 이 Job은 ubuntu-latest 러너에서 실행되며, actions/checkout 액션과 echo Hello World! 명령어를 차례로 실행


참조 : https://tech.kakaoenterprise.com/180


GitHub Actions의 큰 장점 중 하나는 커스텀 액션(Custom Actions)을 쉽게 개발하고 사용할 수 있다는 점
GitHub Actions에는 빌드 속도를 개선하기 위한 캐시 액션이 있지만, Enterprise GitHub에서는 사용하는 Runner에 직접 캐싱을 하는 것이 더 빠르다는 이유로 캐시 액션이 지원되지 않는다.
단순히 Runner에 직접 캐싱하는 경우 모든 Runner에 캐시가 최신화되어 있다고 보장할 수도 없다
GitHub Actions에서는 특정 동작을 수행하기 위한 로직들을 커스텀 액션으로 개발할 수 있다. 
그리고 워크플로 파일에서는 단순히 커스텀 액션을 호출하는 것으로 원하는 동작을 간단히 수행할 수 있다. 
또한, 커스텀 액션은 여러 레포지토리에서 공유하여 사용할 수 있기에, 여러 레포지토리에 중복된 로직들이 구현되는 것도 방지



https://insight.infograb.net/blog/2021/05/31/gitlab-ci-vs-github-action/
















